{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","main","humidity","temp_max","temp_min","sys","sunrise","sunset","coord","lat","lon","setWeather","className","style","fontSize","autocapitalize","type","placeholder","value","onChange","e","target","onClick","fetch","then","res","json","result","console","log","position","bottom","right","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKAIMA,EACC,mCADDA,EAEE,2CAsEOC,MAnEf,WAEE,MAA0BC,mBAAS,YAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,CACrCG,QAAS,CACP,EAAG,CACDC,KAAM,WAGVA,KAAM,CACJC,SAAU,GACVC,SAAU,OACVC,SAAU,QAEZC,IAAK,CACHC,QAAS,WACTC,OAAQ,YAEVC,MAAO,CACLC,IAAK,QACLC,IAAK,WAjBT,mBAAOV,EAAP,KAAgBW,EAAhB,KA8BA,OACE,sBAAKC,UAAU,UAAf,UACE,oBAAIC,MAAO,CAAEC,SAAU,QAAvB,gCACA,uBAAOC,eAAe,aAAaC,KAAK,OAAOC,YAAY,cAAcC,MAAOpB,EAAOqB,SAAU,SAAAC,GAAC,OAAIrB,EAASqB,EAAEC,OAAOH,UACxH,uBACA,uBACA,wBAAQF,KAAK,SAASE,MAAM,SAASI,QAf1B,SAACF,GACdG,MAAM,GAAD,OAAI5B,EAAJ,qBAAyBG,EAAzB,kBAAwCH,IAC1C6B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJhB,EAAWgB,GACXC,QAAQC,IAAI7B,OAUd,0BACA,uBACA,uBACA,uBACA,sBAAKY,UAAU,YAAf,UACE,8CAAiBZ,EAAQA,QAAQ,GAAGC,QACpC,uBACA,+CAAkBD,EAAQC,KAAKC,YAK/B,uBACA,sDAAyBF,EAAQC,KAAKE,SAAW,IAAjD,UACA,uBACA,sDAAyBH,EAAQC,KAAKG,SAAW,IAAjD,UACA,uBACA,+CAAkBJ,EAAQQ,MAAME,OAChC,uBACA,gDAAmBV,EAAQQ,MAAMC,OACjC,0BAEF,uBACA,sBAAKI,MAAO,CAAEiB,SAAU,QAASC,OAAQ,KAAMC,MAAO,KAAMC,MAAO,SAAWrB,UAAU,YAAxF,gBAAuG,qDC3D9FsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.d5e55710.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\n// import aud from \n\nconst api = {\n  key: \"d52abb38362a26bba109a123e0b5dc6a\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('Kakinada');\n  const [weather, setWeather] = useState({\n    weather: {\n      0: {\n        main: \"Clouds\"\n      }\n    },\n    main: {\n      humidity: 42,\n      temp_max: 308.41,\n      temp_min: 308.41\n    },\n    sys: {\n      sunrise: 1625011252,\n      sunset: 1625058504\n    },\n    coord: {\n      lat: 16.9333,\n      lon: 82.2167\n    }\n  });\n\n  const search = (e) => {\n    fetch(`${api.base}weather?q=${query}&appid=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        setWeather(result);\n        console.log(weather);\n      });\n  }\n\n  return (\n    <div className=\"app_div\">\n      <h1 style={{ fontSize: \"60px\" }}>Know your Weather!</h1>\n      <input autocapitalize=\"characters\" type=\"text\" placeholder=\"Eg:- London\" value={query} onChange={e => setQuery(e.target.value)} />\n      <br />\n      <br />\n      <button type=\"submit\" value=\"Submit\" onClick={search} >üîç</button>\n      <br />\n      <br />\n      <br />\n      <div className=\"container\">\n        <span>Weather:- {weather.weather[0].main}</span>\n        <br />\n        <span>Humidity:- {weather.main.humidity}</span>\n        {/* <br />\n        <span>Sunrise:- {weather.sys.sunrise}</span>\n        <br />\n        <span>Sunset:- {weather.sys.sunrise}</span> */}\n        <br />\n        <span>Temparature max:- {weather.main.temp_max - 273}¬∞</span>\n        <br />\n        <span>Temparature min:- {weather.main.temp_min - 273}¬∞</span>\n        <br />\n        <span>Latitude:- {weather.coord.lon}</span>\n        <br />\n        <span>Longitude:- {weather.coord.lat}</span>\n        <br />\n      </div>\n      <br />\n      <div style={{ position: \"fixed\", bottom: \"2%\", right: \"2%\", color: \"white\" }} className=\"signature\">By <i>Hemanth Kumar</i></div>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}